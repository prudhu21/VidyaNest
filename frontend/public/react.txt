React:-
React is created for single page application mainly built for reusable complexity and component based structure
It is a JavaScript library used to build reusable UI components and single page applications (SPAs) with fast rendering using the virtual DOM
•	Due to the virtual DOM  we don’t have lazy loading, reduces refreshing rate and manipulate and it improves performance
•	Before clicking live server the react will create and load virtual DOM , whenever we are clicking live server it will moves to the original DOM
•	Virtual rendering is present in the browser itself
•	React itself contains reloaded speed and refreshing
History of react:-
•	Created by Jordan Walke, he is a software engineer at facebook
•	Developed in 2011
•	And later by using that Instagram is created in 2012
•	React was open sourced in 2013 in may by facebook
Why React?
•	Facebook faced updating the DOM efficiently, managing complex UIs with a lot of dynamic data
•	They needed a fast reusable and maintainable solution, react solved with this
•	React is a component based structure
•	One way data flow (single page),from top to bottom the data flows, this makes debugging eaiser
•	It handles the rendering efficiently
•	It contains large developer community and third-party libraries
Vite is the traditional method to create react application, it contains updated modules
Whatsapp, Instagram, Netflix are developed using React

Step-by-Step Installation for React:-
•	First we need to install node Js  type nodejs  downloadnodejs.org/en/downloadclick on download after downloaded double click on it  the latest version is 22after downloaded click all next and click install
•	For checking correctly installed or not in cmd type node or node –version
•	Create new folderreactapp (folder name) file explorercmdcode .  open in vsc open terminal
•	npm create vite@latest . if you get errors  type Get-ExecutionPolicy and Set ExecutionPolicy RemoteSigned  in windows powershell after this if you get remote signed then completed setting
•	it asks to select framework  click on react and click enter
•	asks to select variant  select javascript and click on enter
•	type  npm I we get found 0 vulnerabilities then successfully installed
•	npm run dev  open local link you will get default code and output
Default packages and code are like as below:-
 

Default Output:-default counter app code will be there
 

React SetUp was completed successfully we want to do every time when we create a new project
•	We have extension jsx:- javascript extension
•	Here we can include html code directly
•	Combination html+ js =jsx
•	We need to create everything with .jsx extension when we are using vite
Folder Structure:-
•	We can node modules in this we have lot of packages, installed automatically when we type npm I command
•	Next we have public all common files will be placed
•	The code will be written in src
•	Here we have only one file index.html it is the main html file
•	main.jsx is the main javascript file
•	in main.jsx file we have a tag StrictMode by using this the errors will be created, we will get errors clearly  and perfectly
•	what ever we change in app.jsx that will be reflect on main.jsx 
•	what ever we change in main.jsx those are reflected in index.html
•	After creating app everytime remove all the code present in the index.css due to this styles will not be override
•	package-lock.json the starting modules what we will be installed 
•	package.json it contains scripts and the packages we are going to install further, to check the package installed or not or we can check here if we want version we can check here
•	we have readme.md there is no need of this you can delete this
Functional Component:-
A functional component is a JavaScript function that returns JSX
Syn:-
function Welcome(){
return <h2> Welcome to React </h2>
}
(OR arrow function)
Syn:-
const Welcome=()=> <h2> Welcome to React </h2>;
To Create Functional Component :-
We will type rafce (react functional component exporting) we will get the default code, for this we want to install the extension es7  ES7+ React/Redux/React-Native snippets
Props in React:-
Allows you to pass the data from a parent component to a child component
•	Used only for passing simple data if the complexity is increased we use context api
•	Context api is for medium projects only, even the complexity will increases then we use redex
Example:-
const User=(props)=>{
	return <h3>Helloo, {props.name}</h3>
}
function App(){
	return <User name=”Alice”/>;
}  
In parent component what data we want to pass that will be written,and that is passed to child as props
•	While importing anything in react don’t import that manually in the below inside return type your component name what you want to import than than click on enter that will be imported above automatically
Example for passing single props:-
App.jsx:-
import React from 'react'
import User from './components/User'
import './App.css'
const App = () => {
  return (
    <>
      <User name="Prudula"/>
    </>
  )
}

export default App

User.jsx:-
import React from 'react'

const User = (props) => {
  return (
    <div><h1>This is User Component {props.name}</h1></div>
  )	
}

export default User

Props Drilling:-
It means passing the data from a top-level component down to deeply nested components even if intermediate components don’t need to use that data,but just passing it along
•	Props are passed from one component to another component that do not need the data but only help in passing it through the tree that is called as ”prop drilling”

 

•	In the above example the featuresSection doesn’t need the data but only for passing that data to childs components we will pass through that one
•	As the application will increase the passing no.of propos will be increased and unnecessary data will be passed
•	To pass the data only to the childrens without passing them to all components we have a react context which is to be discussed in further classes 
Example for Props Driling :-
Passing Props from App.jsx and to User.jsx and to Profile.jsx:-
App.jsx:-
import React from 'react'
import User from './components/User'
import './App.css'
const App = () => {
  return (
    <>
      <User name="Prudula"/>
    </>
  )
}
export default App

User.jsx:-
import React from 'react'
import Profile from './Profile'

const User = (props) => {
  return (
    <div>
        <h1>This is User Component</h1>
        <Profile profileName={props.name}/>
    </div>
  )
}

export default User

Profile.jsx:-
import React from 'react'
const Profile = (props) => {
  return (
    <div>
        <h1>This is Profile Component {props.profileName} </h1>
    </div>
  )
}

export default Profile

Styling in React:-
1.	Inline Styling:-
const style={
	color=”blue”,
	backgroundColor:”lightgray”
}
return <h1 style={style}>Styled Heading</h1>;
2. CSS styling:-
In App.css:-
.title{
	font-size:24px;
}

React Hooks
•	Hooks are special JavaScript functions
•	Introduced  in React 16.8 version
•	That allow functional components to use features like state, lifecycle methods, and more features that were earlier available only in class components
•	Totally we have 7 types of react hooks
•	Mostly important hook is useState and useEffect
•	UseState:- used for manipulating the state of the application
o	It is a react hook that allows local state management in a functional component.
o	Syn:- const [state, setState]=useState(initialValue);
	state:- current value
	setState:- function to update the previous value
	initialValue :- starting value for the state (string,number,array,object,….etc) 
•	UseEffect :- used for side effects and lifecycle methods
o	Side effects means interacting with the outside world
o	It is a hook that lets you run side effects like fetching data, setting up subscriptions, or manually updating the DOM or for toogling
o	We will do all dom manipulations inside the useEffect
o	Dependencies  while rendering it will check those dependencies and apply those effects in the website
o	Examples :-
	API Calls
	Dom updates (scroll, title,..etc)
	Subscriptions
	Timers 
•	UseRef:- Accessing and persisting DOM values
•	useReduce:- we will use this in redux
•	useMemo:- for calculation parts we will use this,for rerendering we use this
•	useCallback:- for rewriting we use this
•	useContext

UseState Example:-

FormInput.jsx:-
import React, { useState } from 'react'

const FormInput = () => {
    const [name,setName]=useState("");
    const [email,setEmail]=useState("");
    
  return (
    <div style={{marginLeft:"800px"}}>
        <form action="submit">
            <label htmlFor="name">Name:</label>
            <input style={{height:"35px",marginBottom:"10px",fontSize:'25px'}}  type='text' onChange={e=> setName(e.target.value)}/><br/><br/>

            <label htmlFor='email'>Email: </label>
            <input style={{height:"35px",marginBottom:"10px",fontSize:'25px'}} type='email' onChange={(e)=> setEmail(e.target.value)}/><br/><br/>
            <button style={{backgroundColor:'blue',marginLeft:'100px'}}>Submit</button>
        </form>
        <div style={{backgroundColor:"blue",padding:'10px',marginTop:"40px",height:'200px',paddingTop:"90px",width:"300px",borderRadius:"20px"}}>
            <p style={{fontSize:'20px'}}>Name: {name}</p>
            <p style={{fontSize:'20px'}}>Email: {email}</p>
        </div>
    </div>
  )
}

export default FormInput

App.jsx:-
import React from 'react'

const App = () => {
  
  return (
    <>
      <FormInput/>
    </>
  )
}

export default App

WhenEver you start creating new app :-
•	npm create vite@latest . after this command
•	npm i
If you want routing:-
•	npm i react-router-dom
want to use bootstrap:-
•	npm i react-bootstrap
want to run your app:-
•	npm run dev

To Use bootstrap in react:-
•	For normal bootstrap Go to bootstrap5in the bundle we have script tag copy that and paste in your folder in the index.htmlinside body tagat the end
•	In the terminal type command like npm I react-bootstrap
•	To check whether installed correctly or not go to the package.json and check inside the dependencies
•	For react bootstraptype react bootstrap in your browser type navbar componentschoose what type of navbar you wantcopy that code and paste in your navbar componentand keep that component in the app.js file. 
•	import 'bootstrap/dist/css/bootstrap.min.css';
•	Import the above line in main.jsx

UseNavigate:-
To navigate for a particular component we can use this without giving link
Here the below is the basic example

NavbarComponent.jsx:-
import Button from 'react-bootstrap/Button';
import Container from 'react-bootstrap/Container';
import Form from 'react-bootstrap/Form';
import Nav from 'react-bootstrap/Nav';
import Navbar from 'react-bootstrap/Navbar';
import NavDropdown from 'react-bootstrap/NavDropdown';
import { useNavigate } from 'react-router-dom';

function NavScrollExample() {
  const navigate=useNavigate()

  const handleAbout=()=>{
    navigate('/about')
  }

  return (
    <Navbar expand="lg" className="bg-body-tertiary">
      <Container fluid>
        <Navbar.Brand href="#">Navbar scroll</Navbar.Brand>
        <Navbar.Toggle aria-controls="navbarScroll" />
        <Navbar.Collapse id="navbarScroll">
          <Nav
            className="me-auto my-2 my-lg-0"
            style={{ maxHeight: '100px' }}
            navbarScroll
          >
            <Nav.Link href="/Home">Home</Nav.Link>
            <button onClick={handleAbout}>About</button>
            <Nav.Link href="/contact">Contact</Nav.Link>
            <Nav.Link href="/skills">Projects</Nav.Link>
            <Nav.Link href="/projects">Skills</Nav.Link>
            
          </Nav>
          <Form className="d-flex">
            <Form.Control
              type="search"
              placeholder="Search"
              className="me-2"
              aria-label="Search"
            />
            <Button variant="outline-success">Search</Button>
          </Form>
        </Navbar.Collapse>
      </Container>
    </Navbar>
  );
}

export default NavScrollExample;

App.jsx:-
import React from 'react'
import {BrowserRouter as Router,Routes,Route} from 'react-router-dom'
import Home from './componets/Home'
import NavScrollExample from './componets/NabarComp'
import About from './componets/About'
import Skills from './componets/Skills'
import Projects from './componets/Projects'
import Contact from './componets/Contact'

const App = () => {
  return (
    <>
      <Router>
        <NavScrollExample />
        <Routes>
          <Route path='/home' element={<Home/>} />
          <Route path='/about' element={<About/>}/>
          <Route path='/skills' element={<Skills/>}/>
          <Route path='/projects' element={<Projects/>}/>
          <Route path='/contact' element={<Contact/>}/>

        </Routes>
      </Router>
    </>	
  )
}

export default App
Types of Routes:-
1.	Static Routing:- we want import routes,router,BrowserRouter
o	Inside browserRoute we will write router inside router we write route inside route we have path and element
2.	Dynamic Routing:- getting data from any api’s for negotiating the static routing things this was introuduced
o	Inside the path we want to include the : after that symbol we can write anything like userId or categories
o	We want use useParams
3.	UseNavigate:-
o	We define navigate function and we store that function in any variable after storing when we access we can get that
4.	Nested Routing:-
o	If we want to place inside route another routes, keeping single route in that we wrap another two routes
o	We want to use outlet
5.	Protected Routing:-
o	Simply to use conditional rendering we can use this
o	We will pass parameter as a children
o	For example here we are taking authentication simply true if it is true navigate to the dashboard, when it is false it navigate to the login
o	We wrap that route inside the protected route
For dynamic routing:-

For dynamic routing inside route path we will take the path by keeping : like as below
<Route path=”/user/:userId” element={<UserProfile/>}/>
•	Inside useState we will give null when developer want to say nothing is there in that,if we can’t give anything by default it will take undefined
•	In dynamic routing while passing we will pass by using useParams

Small example using useEffect, UseState and routers:-
UserProfile.jsx:-
import React, { useEffect, useState } from 'react'
import { useParams } from 'react-router-dom'

function UserProfile(){
    const {userId}=useParams();
    const [user,setUser]=useState(null);

    useEffect(()=>{
        fetch(`https://jsonplaceholder.typicode.com/users/${userId}`)
        .then(res=>res.json())
        .then(data=>setUser(data));
    },[userId]);

    if(! user) return <div>Loading....</div>
    return(
        <div>
            <h1>Name: {user.name}</h1>
            <p>Email: {user.email}</p>
        </div>
    )
    
}
export default UserProfile

App.jsx:-
We will add route UserProfile as below
import React from 'react'
import {BrowserRouter as Router,Routes,Route} from 'react-router-dom'
import Home from './componets/Home'
import NavScrollExample from './componets/NabarComp'
import About from './componets/About'
import Skills from './componets/Skills'
import Projects from './componets/Projects'
import Contact from './componets/Contact'
import UserProfile from './componets/UserProfile'

const App = () => {
  return (
    <>
      <Router>
        <NavScrollExample />
        <Routes>
          <Route path='/home' element={<Home/>} />
          <Route path='/about' element={<About/>}/>
          <Route path='/skills' element={<Skills/>}/>
          <Route path='/projects' element={<Projects/>}/>
          <Route path='/contact' element={<Contact/>}/>
          <Route path="/user/:userId" element={<UserProfile/>}/>

        </Routes>
      </Router>
    </>
  )
}

export default App

Output:-
For output in url search like http://localhost:5173/user/1
If you want all the users keep that in inside the forEach()

Nested Routes:-
•	One route inside another route or two or more routes inside the main route
•	We will have outlet here, outlet renders nested routes
•	All the routings related are inside the react-router-dom
Small Example is here below:-
DashboardLayout.jsx:-
import React from 'react'
import { Link, Outlet } from 'react-router-dom'

const DashboardLayout = () => {
  return (
    <div>
      <h2>Dashboard</h2>
      <nav>
        <Link to="profile">Profile</Link>
        <Link to="settings">Settings</Link>
      </nav>
      <Outlet/> {/* it is used to renderr the nested routes here */}
    </div>
  )
}

export default DashboardLayout

App.jsx:-
import React from 'react'
import {BrowserRouter as Router,Routes,Route} from 'react-router-dom'
import DashboardLayout from './componets/DashboardLayout'
import Profile from './componets/profile'
import Settings from './componets/settings'
const App = () => {
  return (
    <>
      <Router>
<Routes>
//nested route
          <Route path='dashboard' element={<DashboardLayout/>}>
            <Route path='profile' element={<Profile/>}/>
            <Route path='settings' element={<Settings/>}/>
          </Route>
        </Routes>
      </Router>
    </>
  )
}
export default App

Protected Routes:-
•	Nothing but conditional rendering
•	If login we will move to one else we will move to other one

ProtectedRoute.jsx:-
import { Navigate } from "react-router-dom";

export default function ProtectedRoute({children}){
    const isAuthenticated=false;
    return isAuthenticated?children:<Navigate to="/profile" replace/>;
}

App.jsx:-
<Route path='/admin' element={
            <ProtectedRoute>
              <DashboardLayout/>
            </ProtectedRoute>
     	}/>
We will write the above route in app.jsx
LazyLoading:-
•	In this we will keep the loading when that was loading
•	We have lazy and suspense here
•	Inside suspense we can write out routes
•	Lazy dynamically imports components dynamically
•	Suspense is for getting the callback things
Example:-
import { lazy, Suspense } from ‘react’;
Const Home =lazy(()=> import(‘./Home’));
function App(){
return (
      <Suspense fallback={<div>Loading…</div>}>
	<Routes>
		<Route path=”/” element={<Home />} />
	<Routes/>
</Suspense>
);	
}

What is the context API:-
The context API is a built in feature in react that allows you to share data across the component tree without having to pass props manually at every level (props drilling)
Why do we need context api?
To avoid prop drilling and when a value needs to passed from a parent component to deeply nested children, we end up passing props through many intermediate components that don’t even use the data themselves.
Ex:-
<GrandParent>
	<Parent>
		<Child>
			<GrandChild data={value}/>
		</Child>
</Parent>
<GrandParent>

Structure of Context API:-
1.	Create context
2.	Provide context
3.	Consume context
Create Context:-
export const ThemeContext=createContext();

•	This returns an object with provider & consumer
•	By using above line we can creates a context object
ThemeContext.jsx:-
import { createContext } from "react";
export const ThemeContext=createContext();


Provide Context:-
ThemeProvider.jsx:-
import { useState } from "react"
import { ThemeContext } from "./ThemeContext"

const ThemeProvider=({children})=>{
    const [theme,setTheme]=useState('dark')

    return(
        <ThemeContext.Provider value={{theme,setTheme}}>
            {children}
        </ThemeContext.Provider>
    )
}
export default ThemeProvider
¬¬
ToggleComponent.jsx:-
import { useContext } from "react"
import { ThemeContext } from "./ThemeContext"

const ToggleComponent=()=>{
    const { theme, setTheme }=useContext(ThemeContext);
    console.log("Current Theme:", theme);

    return(
        <div>
            <h1 style={{ color: 'white' ,backgroundColor:"blue"}}>Theme is {theme}</h1>
            <button onClick={()=>setTheme(theme=="dark"?"light":"dark")}>Toggle Theme</button>
        </div>
    )
}
export default ToggleComponent
App.jsx:-
import React from 'react'
import ToggleComponent from './ContextApi/ToggleComponent'
const App = () => {
  return (
<>
      <ToggleComponent/>
    </>
  )
}

export default App

Main.jsx:-
import { StrictMode } from 'react'
import 'bootstrap/dist/css/bootstrap.min.css';
import { createRoot } from 'react-dom/client'
import App from './App.jsx'
import ThemeProvider from './ContextApi/ThemeProvider.jsx';

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <ThemeProvider>
      <App/>
    </ThemeProvider>
  </StrictMode>,
)

Where we use context api:-
•	For authentication
•	Theme toggling
•	Language settings
•	Cart data in small e-commerce apps
•	Global modals, alerts…etc
•	Mostly use for medium applications 
•	For small applications we can use props
•	For large we can use redux
Where we avoid context api:-
•	High Frequency state updates(like animations,timers)
•	Large-Scale state management (consider Redux for complex apps)
Advantages of context API:-
•	No need for prop drilling
•	Simple and easy to implement
•	Good for small to medium global scopes
Limitations of context API:-
•	Not ideal for high-frequency updates (can cause re-renders)
•	Not Observable like Redux (no dev tools or time-travel debugging)
•	Can’t persist state out of the box
•	Can become hard to manage in large apps if overused 
Few Interview Questions of context API:-
•	What is context api?
•	What problems does context api solve?
•	What is context API difference from redux?
•	How do you avoid unnecessary re-renders with Context?
Controlled Components:-
•	React has full control over input using state
•	Instead of taking two separate useStates we can take like as below by keeping all in a single object
const [form,setForm]=useState({email:’’,password:’’});
Example for Controlled Form:-
import React, { useState } from 'react'

const Form = () => {
    const [form,setForm]=useState({email:'',password:''});
    const [formData,setFormData]=useState(null)

    const handleChange=(e)=>{
      setForm({...form,[e.target.name]:e.target.value});
    };

    const handleSubmit=(e)=>{
      e.preventDefault();
      setFormData(form)
      setForm('')
    }

  return (
    <>
      <div>
          <form>
              <label>Email:- </label>
              <input name="email" type='email' placeholder='Enter Your Email' value={form.email} onChange={handleChange}/><br/>
              <label>Password:- </label>
              <input name="password" type='password' placeholder='Enter Your Password' value={form.password} onChange={handleChange}/><br/>
              <button onClick={handleSubmit}>Submit</button>
          </form>
      </div>
     {formData && (
      <div>
        <p>{formData.email}</p>
        <p>{formData.password}</p>
      </div>
     )} 
      
        
    </>
  )
}

export default Form

Example for UnControlledForm:-
import React, { useRef } from 'react'

const UnControlledForm = () => {
    const inputref=useRef();

    const handleSubmit=(e)=>{
        e.preventDefault();
        alert(`Value: ${inputref.current.value}`);
    }
  return (
    <form onSubmit={handleSubmit}>
        <input ref={inputref} type='text' placeholder='Enter Name'/>
        <button type='submit'>Submit</button>
    </form>
  )
}

export default UnControlledForm

FormValidations Example:-
import React, { useState } from 'react'

const FormValidations = () => {
    const [email,setEmail]=useState('')
    const [password,setPassword]=useState('')
    const [error,setError]=useState('')

    const validate=()=>{
        if(!email.includes('@')){
            setError("Invalid email address");
            return false
        }else if(password.length<8){
           		setError("Password must be min 8 characters");
return false
        }else if(!/\d/.test(password)){
            setError("Include at least one number in password")
            return false
        }else if(!/[a-z]/.test(password)){
            setError("Include at least one lowercase alphabet")
            return false
        }else if(!/[A-Z]/.test(password)){
            setError("Include at least one uppercase alphabet")
            return false
        }
        setError('');
        return true
    }

    const handleSubmit=(e)=>{
        e.preventDefault();
        if(validate()){
            alert("Submitted")
        }

    }

  return (
    <form onSubmit={handleSubmit}>
        <label>Email: </label>
        <input value={email} onChange={(e)=>setEmail(e.target.value)}
            placeholder='Enter Your Email'/><br/><br/>
        <label>Password</label> 
        <input type='password' value={password} onChange={(e)=>setPassword(e.target.value)} 
            placeholder='Enter Your Password'/>  <br/><br/>
        <button type='submit'>Submit</button>
        {error && <p>{error}</p>}
    </form>
  )
}

export default FormValidations

Don’t ask in interviews for freshers
Create new folder for this application
While creating new folder make sure to give the commands
•	npm create vite@latest .
•	npm i
Redux:-
•	To manage state larger we will use this one
•	Redux is a state management library for javascript apps (mostly used with react) that helps you manage and centralize the application state.
•	Single source of truth- One centralized place to store the state of your entire application
•	To negotiate props drilling
Why Redux ?:-
Problem:-
•	As apps grow, state becomes harder to manage
•	Props drilling becomes messy
•	Components dispatch actions to update state
How data flow in redux:-
Renders from UI dispatch(action) reducer  store UI re-renders
Step-by-Step Redux with example:-
Step1:- Install redux
npm install @reduxjs/toolkit react-redux
•	if you want to check whether installed successfully or not check in package.json
 
Step:-2 Create a slice:-
Create counterslice.jsx I created this inside the slices component
•	While creating slice we need to give first name  initialStatethen reducers inside reducers we will write our logic
•	We are going to store that slice in store.jsx
•	Store.jsx is like a provider
•	And we will wrap that store.jsx in main.jsx and then we use that in the components here I have Counter.jsx component
•	To create another reducer we have extra reducers when logic will be more
•	Taking a variable called counterSlice we are going to create slice in that variable
•	We will create object inside that slice here we are going to create counter application
•	As this is counter application we write counter login inside reducer
•	Payload  it gets increased the values when we click on increment and goes to logic to increment the value
•	To access the values inside the slice we want to export and we need to get the actions
CounterSlice.jsx:-
import { createSlice } from "@reduxjs/toolkit";

const counterSlice=createSlice({
    name:counter,
    initialState:{value:0},
    reducers:{
        increment:state=>{state.value+=1},
        decrement:state=>{state.value-=1},
        incrementByAmount: (state, action) => {
            state.value += action.payload;
        }
  }
});

export const { increment, decrement, incrementByAmount } = counterSlice.actions;
export default counterSlice.reducer;

Step:-3 write in a provider
Store.jsx:-
import { configureStore } from "@reduxjs/toolkit";
import counterReducer from './slices/counterSlice'

const store=configureStore({
    reducer:{
        counter:counterReducer
    }
});

export default store;

Step:-4 wrap in main.jsx

main.jsx:-
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.jsx'
import { Provider } from 'react-redux'
import store from './redux/Store.jsx'

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <Provider store={store}>
      <App/>
    </Provider>
  </StrictMode>,
)

Step:-5 we will use in components
•	Here we import useSelector and useDispatcher
•	And we write all our counter application here
•	Inside useSelector by using state we will get the values
•	useDispatcher is for printing the data
•	we must keep this useDispatcher inside the useEffect
•	To print the reducer values functions and to update those values
Counter.jsx:-
import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { increment, decrement, incrementByAmount } from '../redux/slices/counterSlice';

const Counter = () => {
  const count = useSelector(state => state.counter.value);
  const dispatch = useDispatch();

  return (
    <div>
      <h1>Counter: {count}</h1>
      <button onClick={() => dispatch(increment())}> + </button>
      <button onClick={() => dispatch(decrement())}> - </button>
      <button onClick={() => dispatch(incrementByAmount(5))}> +5 </button>
    </div>
  );
};
export default Counter

Fetching Using redux:-
•	We want to keep the fetching login in useEffect 
•	We will create extra data here
