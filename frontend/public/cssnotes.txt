        CSS Syntax:-
        -----------

            selector {
            property1: value1;
            property2: value2;
            }

        CSS Text Properties:-
        --------------------

        1. Text Align

        The CSS "text-align" property specifies the horizontal alignment of the text in an HTML element.

        .h-center {
        text-align: center;
        }
        Value	Description
        center	Aligns the text to the center
        left	Aligns the text to the left
        right	Aligns the text to the right
        2. Color

        The CSS "color" property specifies the color of the text.

        .main-heading {
        color: blue;
        }
        .paragraph {
        color: grey;
        }
        2.1. Sample Colors

        Values: blue, grey, lightblue, orange, red, green
        2.2. Hex Code

        CSS Colors can be represented in multiple ways:

        •	Color names
        •	Hex Code
        •	HSL
        •	RGB and many more...

        Since few colors have the Color names, Hex Codes make a good alternative to pick a wide variety of colors.

        Some of the Color names and their Hex Codes are:

            Color Name	Hex Code
            orange	#ffa500
            red	#ff0000
            blue	#0000ff
            green	#008000
            -	#012d36
            -	#432711
            -	#25b1cc
        .button {
        background-color: #25b1cc;
        }
        2.2.1 How to pick a color using Hex Code

        The color picker lets you pick a color among the approximately 16,777,216 colors available.

        One of the simplest ways to access a color picker is:

            • Type color picker in the Google Search bar and search it.

            3. Font Family

        The CSS "font-family" property specifies the font for an element.

        @import url("https://fonts.googleapis.com/css2?family=Bree+Serif&family=Caveat:wght@400;700&family=Lobster&family=Monoton&family=Open+Sans:ital,wght@0,400;0,700;1,400;1,700&family=Playfair+Display+SC:ital,wght@0,400;0,700;1,700&family=Playfair+Display:ital,wght@0,400;0,700;1,700&family=Roboto:ital,wght@0,400;0,700;1,400;1,700&family=Source+Sans+Pro:ital,wght@0,400;0,700;1,700&family=Work+Sans:ital,wght@0,400;0,700;1,700&display=swap");
        .main-heading {
        font-family: "Roboto";
        }
        .paragraph {
        font-family: "Roboto";
        }
        You can use one of the below values of the "font-family" property,

        Value

        font-families-and-appearance
        Note:

        1. To use font families, you need to import their style sheets into your CSS file.
        2. There shouldn't be any spelling mistakes in the values of the `font-family` property.
        3. There must be quotations around the value of the `font-family` property.
        4. Font Size

        The CSS "font-size" property specifies the size of the font.

        .main-heading {
        font-size: 36px;
        }
        .paragraph {
        font-size: 28px;
        }
        Note:

        1. You must add `px` after the number in the value of the `font-size` property.
        2. There shouldn't be any space between the number and `px`.
        3. There shouldn't be any quotations around the value of the `font-size` property.
        5. Font Style

        The CSS "font-style" property specifies the font style for a text.

        You can use one of the below values of the "font-style" property,

        Value: normal,italic,oblique
        .main-heading {
        font-style: italic;
        }
        .paragraph {
        font-style: normal;
        }
        Note:

        1. There shouldn't be any spelling mistakes in the values of the `font-style` property.
        2. There shouldn't be any quotations around the value of the `font-style` property.
        6. Font Weight

        The CSS "font-weight" property specifies how thick or thin characters in text should be displayed.

        .main-heading {
        font-weight: bold;
        }
        .paragraph {
        font-weight: 200;
        }
        You can use one of the below values of the "font-weight" property,

        Values: normal, bold, bolder, lighter, 100, 200, 300, 400, 500, 600, 700, 800, 900
        Note:

        1. There shouldn't be any spelling mistakes in the values of the `font-weight` property.
        2. There shouldn't be any quotations around the value of the `font-weight` property.
        3. The numerical values given to the `font-weight` property must be in the range from `100` to `900` and should be the multiples of `100`.
        7. Text Decoration

        The CSS "text-decoration" property specifies the decoration added to the text.

        .main-heading {
        text-decoration: underline;
        }
        .paragraph {
        text-decoration: overline;
        }
        You can use one of the below values of the "text-decoration" property,

        Value	Description
        underline	Underline the text
        line-through	Strike through the text
        overline	Overline the text
        Note:

        1. There shouldn't be any spelling mistakes in the values of the `text-decoration` property.
        2. There shouldn't be any quotations around the value of the `text-decoration` property.
        3. Ensure that `text-decoration` and `line-through` are hyphenated.
        CSS Background Properties
        1. Background Color

        The CSS "background-color" property specifies the background color of an HTML element.

        .card {
        background-color: lightblue;
        }
        2. Background Image

        The CSS "background-image" property specifies the background image of an HTML element.

        .card {
        background-image: url("https://d1tgh8fmlzexmh.cloudfront.net/ccbp-static-website/ocean.jpg");
        }
        Value	Description
        url (URL)	The URL to the image.
        Warning:

        1. The background image takes the height of the content of an HTML element if you don't specify the height to it.
        2. The URL given to the `background-image` must be a valid URL to display the image.
        3. Background Size

        The CSS "background-size" property specifies the size of the background image of an HTML element.

        .card {
        background-size: cover;
        }
        Value	Description
        cover	Scales the image to the smallest size while maintaining the same aspect ratio (width/height) and covers the entire width and height even if the image is cropped.
        Note:

        Aspect Ratio is the ratio of the width and height (width/height) of an image.
        CSS Box Properties
        1. Height

        The CSS "height" property specifies the height of an HTML element.

        .card {
        height: 200px;
        }
        2. Width

        The CSS "width" property specifies the width of an HTML element.

        .card {
        width: 250px;
        }
        3. Border Width

        The CSS "border-width" property specifies the width of the border for all four sides of an HTML element.

        .button {
        border-width: 2px;
        }
        The CSS Property and value pair "border-width: 0px;" removes the border of an HTML element.

        Warning:

        Specifying the CSS `border-style` property for an HTML element is mandatory. Otherwise, the CSS properties like `border-color`, `border-width` will not appear in the browser. The HTML `button` element is an exception as it appears with a border in the browser by default.
        4. Border Radius

        The CSS "border-radius" property specifies the roundness of the corners of an HTML element.

        .button {
        border-radius: 20px;
        }
        You can use the below CSS properties to round a specific corner of an HTML element.

        Properties: border-top-left-radius, border-top-right-radius, border-bottom-left-radius, border-bottom-right-radius
        Quick Tip:

        Specifying the background color for an HTML element makes the border radius more visible.
        5. Border Color

        The CSS "border-color" property specifies the color of the border for all four sides of an HTML element.

        .button {
        border-color: orange;
        }
        Warning:

        Specifying the CSS `border-style` property for an HTML element is mandatory. Otherwise, the CSS properties like `border-color`, `border-width` will not appear in the browser. The HTML `button` element is an exception as it appears with a border in the browser by default.
        6. Border Style

        The CSS "border-style" property specifies the style of the border for all four sides of an HTML element.

        .button {
        border-style: dashed;
        }
        You can use one of the below values of the CSS "border-style" property.

        Value: dotted, dashed, solid, none (default)
        7. Padding

        The CSS "padding" property specifies the space around the content of an HTML element.

        .card {
        padding: 10px;
        }
        8. Margin

        The CSS "margin" property specifies the space around the four sides of an HTML element.

        .card-container {
        margin: 10px;
        }
        You can use the below CSS properties to apply a margin on the specific side of an HTML element,

        Properties: margin-top, margin-right, margin-bottom, margin-left
        Viewport
        The browser's viewport is the area of the window in which web content can be seen.

        1. Viewport Height

        The CSS Viewport Height "vh" Unit equals to 1% of the height of the Viewport (browser window size).

        .card {
        height: 50vh;
        }
        Note:

        The height `100vh` sets an HTML element to the entire height of the Viewport (browser window size).
        2. Viewport Width

        The CSS Viewport Width "vw" Unit equals to 1% of the width of the Viewport (browser window size).

        .card {
        width: 100vw;
        }
        Note:

        The width `100vw` sets an HTML element to the entire width of the Viewport (browser window size).
        Reusability
        1. Reusability of CSS Rulesets

        If we want the same style for multiple HTML elements, we can write the CSS Ruleset once and use it for different HTML elements.

        .button {
        width: 138px;
        height: 36px;
        border-width: 0px;
        border-radius: 10px;
        }
        <button class="button">Get Started</button>
        <button class="button">Visit Now</button>
        2. Multiple class names as an HTML attribute value

        We can provide multiple class names separated by space as a value to the HTML class attribute.

        Syntax:

        <tag class = "name1 name2 name3 name4 ...">Content</tag>
        HTML attribute value: name1 name2 name3 name4 ...

        class names: name1, name2, name3, and name4

        .button {
        width: 138px;
        height: 36px;
        border-width: 0px;
        border-radius: 10px;
        }
        .button-green {
        background-color: #8cc63f;
        }
        <button class="button button-green">Get Started</button>

        More Details:-
        -------------

        1. Getting URLs for Your Images

        You can get the URLs to your images using Cloudinary. Cloudinary lets you easily upload the images and provide the image URLs.

        Cloudinary Website URL: https://cloudinary.com/

        Note:

        To Sign up, copy the Cloudinary Website URL and open in new tab.
        2. Install Visual Studio Code

        Windows Operating System
        Ubuntu/Linux Operating System (Watch only for 2 minutes)
        Mac Operating System (Watch only for 2 minutes 30 seconds)
        3. Linking HTML and CSS Files

        We use the HTML link element to link the HTML and CSS files. It is a void element.

        Syntax:

        <link rel="stylesheet" href="tourism.css">
        Note

        You need to add the HTML `link` element in the HTML `head` element.
        4.  HTML Image vs CSS Background Image

        Ways to add Images in Website:

        HTML Image
        CSS Background Image
        When to use HTML Image:

        When there are no content or HTML elements over the Image.
        When Image is a part of the content on a page.
        When to use CSS Background Image:

        When Image is not a part of the content on a page.
        When there are content or HTML elements over the Image.
        5. CSS Margin vs CSS Padding

        margin-and-padding
        When to use CSS Padding:

        To specify the space around the four sides of the content of an HTML element.
        To add the space between the content and border of an HTML element.
        When to use CSS Margin:

        To specify the space around the four sides of an HTML element.
        To add the space between HTML elements.
        For example, let's take an HTML button element.

        <button class="button">View More</button>
        .button {
        padding: 20px;
        margin: 15px;
        }

        Style Attribute:-
        ---------------

        Inline Styles

        The Inline styles are applied directly to an HTML element. They use the HTML "style" attribute, with CSS property values defined within it.

        Syntax:

        <tag style = "property1: value1; property2: value2; ...">Content</tag>

        A HTML "style" attribute value can consist of one or more CSS property values.

        Note


        Inline Styles have the highest specificity. They overwrite any other styles specified using CSS Selectors.

        Using Inline Styles is not recommended because

        • Inline Styles are not reusable.
        • Writing HTML and CSS separately increases code readability.

    CSS Selectors:-
    -------------
    
        The CSS Selectors are used to select the HTML Elements that we want to style.

        The different types of CSS Selectors are:

        •Simple Selectors

            ◦ Class Selector
            ◦ ID Selector
            ◦ Type (tag name) Selector
            ◦ Attribute Selector
            ◦ Universal Selector
            ◦ Pseudo-class
        • Compound Selectors
        • Complex Selectors and many more.

        1. Class Selector

        The CSS Class Selector selects all the HTML elements that have a given CSS class selector as their class attribute value. It consists of a dot ("."), followed by the class name of the HTML element.

        <p class="paragraph">The population of India is around 138 crores.</p>
        .paragraph {
        color: blue;
        }
        Here, the CSS class selector is ".paragraph". So, it selects all the HTML elements that have an HTML attribute name "class", and it's value "paragraph".

        Note

        There can be **more than one** HTML element with the same class name in the HTML document.
        2. ID Selector

        The CSS ID selector selects an HTML element based on its ID attribute value. It consists of a hash ("#"), followed by the ID of the HTML element.

        <p id="populationParagraph">The population of India is around 138 crores.</p>
        #populationParagraph {
        color: blue;
        }
        Here, the CSS ID selector is "#populationParagraph". So, it selects the HTML element that has an HTML attribute name "id" and it's value "populationParagraph".

        Note

        There should be only **one** HTML element with a given ID in the entire HTML document. The HTML "id" attribute value doesn't need to have the prefix "section" as CCBP UI Kit is not used.
        3. Type (tag name) Selector

        The CSS Type Selector selects all the HTML elements based on their tag names ("h1", "p", "div", etc.)

        <p>The population of India is around 138 crores.</p>
        p {
        color: blue;
        }
        Here, the CSS Type selector is "p". So, it selects all the HTML elements that have a tag name "p".

        CSS Building Blocks
        In CSS, the styles that are applied to HTML elements depend on three fundamental concepts.

        • Inheritance
        • Specificity
        • Cascade

        1. CSS Inheritance

        The mechanism through which the value of certain CSS properties is passed on from parent elements to child elements is called Inheritance.

        1.1 Parent Element

        If the HTML elements are placed inside the other HTML element, then the outer HTML element is called the parent element of the HTML elements inside it.

        <div>
        <h1>The seven wonders of the world</h1>
        <p>
            The <a href="https://en.wikipedia.org/wiki/Taj_Mahal">Taj Mahal</a>
            is one of the seven wonders of the world.
        </p>
        </div>
        From the above Code Snippet, we can say:

        The HTML "div" element is the parent element of the HTML "h1" and "p" elements.
        The HTML "p" element is the parent element of the HTML "a" element.
        1.2 Child Element

        An HTML element that is directly inside the parent element is called the child element of that parent element.

        <div>
        <h1>The seven wonders of the world</h1>
        <p>
            The <a href="https://en.wikipedia.org/wiki/Taj_Mahal">Taj Mahal</a>
            is one of the seven wonders of the world.
        </p>
        </div>
        From the above Code Snippet, we can say:

        The HTML "h1" and "p" elements are the child elements of the HTML "div" element.
        The HTML "a" element is the child element of the HTML "p" element.

        CSS properties can be categorized into two types:

        Inherited properties
        Non-inherited properties
        1.3 Inherited Properties

        If the CSS properties applied to the parent element are inherited by the child elements, then they are called Inherited properties.

        Some of the CSS Inherited Properties are:-

        • Text related Properties

        ◦ "font-family"
        ◦ "font-style"
        ◦ "font-weight"
        ◦ "text-align"
        • List related Properties

        ◦ "list-style-type"
        • "color" property and many more.

        1.4 Non-inherited Properties

        If the CSS properties applied to the parent element** are not inherited** by the child elements, then they are called Non-inherited properties.

        Some of the CSS Non-inherited properties are:

        • CSS Box Properties

        ◦ "width"
        ◦ "height"
        ◦ "margin"
        ◦ "padding"
        ◦ "border-style"
        ◦ "border-width"
        ◦ "border-color"
        ◦ "border-radius"
        • CSS Background Properties

        ◦ "background-image"
        ◦ "background-color"
        ◦ "background-size"
        • "text-decoration" and many more.

        2. CSS Specificity

        Specificity is how browsers decide which CSS property values are the most relevant to an HTML element and, therefore, will be applied.

        The following list of CSS Selectors is in the lowest to highest order by specificity.

        Type (tag name) Selector
        Class Selector
        ID Selector
        2.1 Type Selector & Class Selector

        A Class Selector is more specific compared to Type (tag name) Selector as it selects only the HTML elements that have a specific class attribute value in the HTML document.

        Note

        It doesn't overwrite the entire CSS Ruleset but only overwrites the CSS properties that are the same.
        2.2 Class Selector & ID Selector

        An ID Selector is more specific when compared to a Class Selector as we provide a unique ID within the HTML document and it selects only a single HTML Element.

        2.3 Inline Styles

        Inline Styles have the highest specificity. They overwrite any other styles specified using CSS Selectors.

        3. CSS Cascade

        The source order of CSS Rulesets matters. When two CSS Rulesets have equal specificity, the one that comes last in the CSS is applied.

        Note

        The styles that apply to the HTML Elements are not determined by the **order the classes** defined in the HTML "class" attribute, but instead the order in which they appear in the CSS.
        3.1 The !important exception

        It is a special piece of CSS used to make a particular CSS property and value the most specific thing, irrespective of source order and specificity.

        <h1 class="style-1">About India</h1>
        .style-1 {
        color: green;
        }
        h1 {
        color: orange !important;
        }
        The only way to override a "!important" property value is to include another "!important" property value. The added property value should either come later in the order or should be of higher specificity.

        Note

        Always look for a way to use specificity before even considering "!important".

        Only use "!important" when you want to override foreign CSS (from external libraries, like Bootstrap).
        Style Attribute
        Inline Styles

        The Inline styles are applied directly to an HTML element. They use the HTML "style" attribute, with CSS property values defined within it.

        Syntax:

        <tag style = "property1: value1; property2: value2; ...">Content</tag>

        A HTML "style" attribute value can consist of one or more CSS property values.

        Note


        Inline Styles have the highest specificity. They overwrite any other styles specified using CSS Selectors.

        Using Inline Styles is not recommended because

        • Inline Styles are not reusable.
        • Writing HTML and CSS separately increases code readability.

        Icons
        1. Adding Icons

        There are a limited number of Icon choices in Bootstrap icons. Since we don’t have the desired icons in Bootstrap Icons, we use Font Awesome Icons.

        1.1. Font Awesome Icons

        To use the Font Awesome Icons, you need to add the below Font Awesome Icons Kit Code in the HTML "head" element.

        <script src="https://kit.fontawesome.com/ac42c3b1f7.js" crossorigin="anonymous"></script>
        Note

        The CSS Property "border-radius" allows you to add circular corners to an HTML element. We need to provide the same height and width to get circular corners else we will get elliptical corners.
        2. Bootstrap Icons

        2.1. How to add the Bootstrap Icons

        • Go to https://icons.getbootstrap.com in your Web browser. You will find many icons.
        • Click on the icon you need. For the icon used in this section, click on "arrow-right-short".
        • Copy the HTML code and paste it.
        • Change the HTML attributes "width", "height", and "fill" of the HTML "svg" element as you need.

        Note

        The HTML "svg" element is an HTML inline element. We can use it to add icons to our website.
        CSS Colors
        Transparent

        The CSS "transparent" keyword represents a fully transparent color. This makes the background behind the colored HTML element completely visible.

        For example, to set a transparent background color,

        .custom-outline-button {
        background-color: transparent;
        }
        This allows you to set the background color of the HTML element to transparent so that any background HTML element will show through.

        Bootstrap also provides you with a class name "bg-transparent" to set the background color to transparent.

        CSS Gradients
        A special type of Background Image formed by the transition between two or more colors.

        There are mainly two types of gradients:

        • Linear Gradient
        • Radial Gradient

        1. Linear Gradient

        To create the most basic type of gradient, all you need is to specify two colors. You must have at least two colors, but you can have as many as you want.

        <div class="linear-gradient-background"></div>
        .linear-gradient-background {
        height: 100vh;
        background-image: linear-gradient(#2196f3, #f44336);
        }
        1.1 Changing Direction

        By default, linear gradients run from top to bottom. You can change their transition by specifying a direction.

        Direction	Description	
        to top	Colors transition (change) from bottom to top
        to bottom	It is a default direction. Colors transition (change) from top to bottom	
        to left	Colors transition (change) from right to left
        to right	Colors transition (change) from left to right
        .linear-gradient-background {
        background-image: linear-gradient(to right, #2196f3, #f44336);
        }
        1.2 Using more than two colors

        You don't have to limit yourself to two colors. You may use as many as you like! By default, colors are evenly spaced along the gradient.

        .linear-gradient-background-with-more-colors {
        height: 100vh;
        background-image: linear-gradient(red, blue, yellow, orange);
        }
        2. Radial Gradient

        <div class="radial-gradient-background"></div>
        .radial-gradient-background {
        height: 100vh;
        background-image: radial-gradient(#2196f3, #f44336);
        }
        2.1 Using more than two colors

        You don't have to limit yourself to two colors. You may use as many as you like! By default, colors are evenly spaced along the gradient.

        .radial-gradient-background-with-more-colors {
        height: 100vh;
        background-image: radial-gradient(red, blue, yellow, orange);
        }
        CSS Units
        Percentage

        To define the size of a Child Element relative to its Parent Element, we can use Percentages.